///////////////////////////////
// Filename: pixel_shader_3d.ps //
///////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[2];
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float  lightPadding;
};

cbuffer ExpressionBuffer
{
	float  expressionPercentage;
    float3 expressionPadding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float2 tex : TEXCOORD0;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 PixelShader3D(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
	float3 lightDir;
    float  lightIntensity;
    float4 color;
	float4 color1, color2;
	float4 blendColor;


    // Get the pixel color from the first texture.
    color1 = shaderTextures[0].Sample(SampleType, input.tex);

    // Get the pixel color from the second texture.
    color2 = shaderTextures[1].Sample(SampleType, input.tex);

    // Blend the two pixels together and multiply by the gamma value.
    blendColor = (color1*(1.0-expressionPercentage)) + (color2*expressionPercentage);//) * 2.0;
	textureColor = saturate(blendColor);
	
	// Set the default output color to the ambient light value for all pixels.
    color = ambientColor;
	
	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));
	
	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }
	
	  // Saturate the final light color.
    color = saturate(color);

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor; // calculation of diffuse light

    return color;
}